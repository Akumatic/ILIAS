@use "sass:math";
/*
* flex grid support start
* modification from standard bootstrap 3 float grid
*/

// solved problem with nested grids by adding width: 100% to mixin from bootstrap's grid-framework.scss
@mixin make-grid-columns(){
  // Common styles for all sizes of grid columns, widths 1-12
  @mixin col($index){ // initial
    $item: unquote(".col-xs-#{$index}, .col-sm-#{$index}, .col-md-#{$index}, .col-lg-#{$index}");
    @include col(($index + 1), $item);
  }
  @mixin col($index, $list) when ($index =< $grid-columns){ // general; "=<" isn't a typo
    $item: unquote(".col-xs-#{$index}, .col-sm-#{$index}, .col-md-#{$index}, .col-lg-#{$index}");
    @include col(($index + 1), unquote("#{$list}, #{$item}"));
  }
  @mixin col($index, $list) when ($index > $grid-columns){ // terminal
    #{$list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  math.ceil(($grid-gutter-width / 2));
      padding-right: math.floor(($grid-gutter-width / 2));
	  width: 100%; // this was added for ilias flex grid support
    }
  }
  @include col(1); // kickstart it
}

.row-flex {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

.row-flex-wrap {
	-webkit-flex-flow: row wrap;
	flex-flow: row wrap;
	align-content: flex-start;
}

.flex-col {
	display: flex;
	display: -webkit-flex;
	flex-flow: column nowrap;
	height: 100%; // to allow equal height cols inside
}

// omitted .flex-grow for now as it has no effect where it is currently used.

/* flex grid support end */


//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed();

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed();
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row();
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}
